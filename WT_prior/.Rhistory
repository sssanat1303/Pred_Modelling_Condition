library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
myfit <- function(train_df, test_df, a = 0){
train_X <- as.matrix(train_df %>% dplyr::select(-Y))
train_y <- train_df$Y
test_X <- as.matrix(test_df %>% dplyr::select(-Y))
test-y <- test_df$Y
cv.fit <- glmnet(train_X, train_y, alpha = a, lambda = lambdas)
plot(cv.fit)
opt.1 <- cv.fit$lambda.min
opt.fit <- cv.fit$glmnet.fit
bets <- as.matrix(coef(opt.fit, s = cv.fit$lambda.min))
n_non0_betas <- sum(betas!=0)
pred_y <- predict(opt.fit, s = opt.1, newx = test_X)
mse <- mean((test_y - pred_y)^2)
return(list(alpha = a, mse = mse, opt.lambda = opt.1,
n_non0_betas = n_non0_betas))
}
allyhat <- function(xtrain, ytrain, xtest, lambdas, nvmax) {
n <- nrow(xtrain)
yhat <- matrix(nrow=nrow(xtest), ncol=length(lambdas))
search <-  regsubsets(xtrain, ytrain, nvmax, method = "back")
summ <- summary(search)
for(i in 1:length(lambdas)) {
penMSE <- n*log(summ$rss) + lambdas[i]*(1:nvmax)
best <- which.min(penMSE)
betahat <- coef(search, best)
xinmodel <- cbind(1, xtest)[,summ$which[best, ]]
yhat[, i] <- xinmodel%*%betahat
}
yhat
}
WWT.modelling <- WWT.modelling %>%
select(condition_overall_score_label, everything())
WWT.modelling <- WWT.modelling[c("condition_overall_score_label", setdiff(names(WWT.modelling), "condition_overall_score_label"))]
View(WWT.modelling)
WWT.yes <- WWT.modelling %>% filter(condition_CCTV_app_availability == "yes")
WWT.no <- WWT.modelling %>% filter(condition_CCTV_app_availability == "no")
missing_plot(WWT.yes)
missing_plot(WWT.no)
View(WWT.modelling)
WWT.yes <- WWT.yes[, -9]
WWT.no <- WWT.no[, -9]
summary(WWT.modelling$condition_overall_score_label)
summary(WWT.yes$condition_overall_score_label)
summary(WWT.no$condition_overall_score_label)
set.seed(123)
rows_to_move <- which(WWT.no$condition_overall_score_label == "5")
num_to_select <- min(10, length(rows_to_move))
selected_rows <- sample(rows_to_move, num_to_select)
WWT.yes <- WWT.yes %>% rbind(WWT.no[selected_rows, ])
WWT.no <- WWT.no[-selected_rows,]
summary(WWT.yes$condition_overall_score_label)
summary(WWT.no$condition_overall_score_label)
set.seed(749)
sample.index <- sample(1:nrow(WWT.yes), size = 0.8 * nrow(WWT.yes))
WWT.yes.train <- WWT.yes[sample.index, ]
WWT.yes.test <- WWT.yes[-sample.index, ]
condition.tree1 <- rpart(condition_overall_score_label~., data = WWT.yes.train)
plotcp(condition.tree1)
predict1 <- predict(condition.tree1, WWT.yes.test, type = "class")
confMatrix1 <- table(Actual = WWT.yes.test$condition_overall_score_label, Predicted = predict1)
confMatrix1
sum(diag(confMatrix1)) / nrow(WWT.yes.test)
plot(condition.tree1, margin = 0.02)
text(condition.tree1, pretty = 2)
printcp(condition.tree1)
condition.tree2 <- rpart(condition_overall_score_label~., data = WWT.yes.train, cp =0.028751)
plotcp(condition.tree2)
predict2 <- predict(condition.tree2, WWT.yes.test, type = "class")
confMatrix2 <- table(Actual = WWT.yes.test$condition_overall_score_label, Predicted = predict2)
confMatrix2
sum(diag(confMatrix2)) / nrow(WWT.yes.test)
plot(condition.tree2)
predict3 <- predict(condition.tree2, WWT.no, type = "class")
confMatrix3 <- table(Actual = WWT.no$condition_overall_score_label, Predicted = predict3)
confMatrix3
sum(diag(confMatrix3)) / nrow(WWT.no)
rf_model <- ranger(condition_overall_score_label ~ ., data = WWT.yes.train, trees = 10000, mtry = 5)
predict4 <- predict(rf_model, WWT.yes.test)$predictions
confMatrix4 <- table(Actual = WWT.yes.test$condition_overall_score_label, Predicted = predict4)
confMatrix4
sum(diag(confMatrix4)) / nrow(WWT.yes.test)
predict5 <- predict(rf_model, WWT.no)$predictions
confMatrix5 <- table(Actual = WWT.no$condition_overall_score_label, Predicted = predict5)
confMatrix5
sum(diag(confMatrix5)) / nrow(WWT.no)
View(WWT.no)
# Convert data frames to matricies and make data and label sets
WWT.yes.train.matrix <- as.matrix(WWT.yes.train[, -11])
WWT.yes.train.label <- WWT.yes.train$condition_overall_score_label
WWT.yes.test.matrix <- as.matrix(WWT.yes.test[,-11])
WWT.yes.test.label <- WWT.yes.test$condition_overall_score_label
WWT.no.matrix <- as.matrix(WWT.no[,-11])
WWT.no.label <- WWT.no$condition_overall_score_label
View(WWT.yes.test.matrix)
View(WWT.yes.test)
View(WWT.yes.test.matrix)
View(WWT.yes.train)
View(WWT.no.matrix)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
WWT_prior <- read_xlsx("C:/Users/SSabharwal/OneDrive - Watercare Services Limited/Pred_Modelling_Condition/WWT_prior/WWT_prioritisation_final.xlsx")
# Getting rid of useless columns
WWT_prior <- WWT_prior %>% select(-GIS_ID)
WWT_prior <- WWT_prior %>% select(-OBJECTID)
WWT_prior <- WWT_prior %>% select(-WSL_OBJECTID)
WWT_prior <- WWT_prior %>% select(-EQUIP_ID)
WWT_prior <- WWT_prior %>% select(-COMPKEY)
WWT_prior <- WWT_prior %>% select(-FAC_CODE)
WWT_prior <- WWT_prior %>% select(-FAC_DESC)
WWT_prior <- WWT_prior %>% select(-PROCESS)
WWT_prior <- WWT_prior %>% select(-GRP)
WWT_prior <- WWT_prior %>% select(-POSITION)
WWT_prior <- WWT_prior %>% select(-STATUS)
WWT_prior <- WWT_prior %>% select(-LINING)
WWT_prior <- WWT_prior %>% select(-US_INV)
WWT_prior <- WWT_prior %>% select(-DS_INV)
WWT_prior <- WWT_prior %>% select(-ACCURACY)
WWT_prior <- WWT_prior %>% select(-TYPE)
WWT_prior <- WWT_prior %>% select(-SERVICE)
WWT_prior <- WWT_prior %>% select(-DATASOURCE)
WWT_prior <- WWT_prior %>% select(-SUBTYPE)
WWT_prior <- WWT_prior %>% select(-FLOWDIR)
WWT_prior <- WWT_prior %>% select(-FLOWDIRACC)
WWT_prior <- WWT_prior %>% select(-HACOMPKEY)
WWT_prior <- WWT_prior %>% select(-R_STAT)
WWT_prior <- WWT_prior %>% select(-R_MAT)
WWT_prior <- WWT_prior %>% select(-R_DIA)
WWT_prior <- WWT_prior %>% select(-R_INST)
WWT_prior <- WWT_prior %>% select(-AQ_TYPE)
WWT_prior <- WWT_prior %>% select(-USE_AREA)
WWT_prior <- WWT_prior %>% select(-HAUNITTYPE)
WWT_prior <- WWT_prior %>% select(-USE_AREAID)
WWT_prior <- WWT_prior %>% select(-R_OWN)
WWT_prior <- WWT_prior %>% select(-OWN)
WWT_prior <- WWT_prior %>% select(-PARLINENO)
WWT_prior <- WWT_prior %>% select(-F_IwiAOI)
WWT_prior <- WWT_prior %>% select(-`New action`)
# Need to fix data types for certain columns/Need to fix and normalise some entries
WWT_prior <- WWT_prior %>%
mutate(across(where(is.character), as.factor))
WWT_prior$condition_CCTV_score <- as.numeric(WWT_prior$condition_CCTV_score)
WWT_prior$condition_overall_score_label <- as.factor(WWT_prior$condition_overall_score_label)
levels(WWT_prior$condition_CCTV_source) <- c(levels(WWT_prior$condition_CCTV_source), "None")
WWT_prior$condition_CCTV_source[is.na(WWT_prior$condition_CCTV_source)] <- "None"
WWT_prior$condition_CCTV_date <- as.factor(WWT_prior$condition_CCTV_date)
levels(WWT_prior$condition_CCTV_date) <- c(levels(WWT_prior$condition_CCTV_date), "None")
WWT_prior$condition_CCTV_date[is.na(WWT_prior$condition_CCTV_date)] <- "None"
WWT_prior$condition_CCTV_score <- as.factor(WWT_prior$condition_CCTV_score)
levels(WWT_prior$condition_CCTV_score) <- c(levels(WWT_prior$condition_CCTV_score), "None")
WWT_prior$condition_CCTV_score[is.na(WWT_prior$condition_CCTV_score)] <- "None"
WWT_prior$INSTALLED <- format(WWT_prior$INSTALLED, "%Y")
WWT_prior$INSTALLED <- as.numeric(WWT_prior$INSTALLED)
# Creating modelling data set and analysis data set
WWT.analysis <- WWT_prior
WWT.analysis <- WWT.analysis %>% select(-SHAPE_Length)
WWT.modelling <- WWT_prior
WWT.modelling <- WWT.modelling %>% select(-condition_overall_score)
WWT.modelling <- WWT.modelling %>% select(-criticality_overall_score)
WWT.modelling <- WWT.modelling %>% select(-criticality_overall_score_label)
WWT.modelling <- WWT.modelling %>% select(-criticality_operational_score)
WWT.modelling <- WWT.modelling %>% select(-criticality_pipe_type_score)
WWT.modelling <- WWT.modelling %>% select(-criticality_people_impacts_score)
WWT.modelling <- WWT.modelling %>% select(-criticality_people_impacts_dataset_s_)
WWT.modelling <- WWT.modelling %>% select(-criticality_environmental_impacts_score)
WWT.modelling <- WWT.modelling %>% select(-criticality_environmental_impacts_dataset_s_)
WWT.modelling <- WWT.modelling %>% select(-criticality_infiltration_score)
WWT.modelling <- WWT.modelling %>% select(-criticality_impact_of_failure_score)
WWT.modelling <- WWT.modelling %>% select(-criticality_flow_ratio)
WWT.modelling <- WWT.modelling %>% select(-criticality_confidence_scenario)
WWT.modelling <- WWT.modelling %>% select(-condition_confidence_scenario)
WWT.modelling <- WWT.modelling %>% select(-`Risk-score`)
knitr::opts_chunk$set(message = FALSE)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WWT.modelling <- WWT.modelling[c("condition_overall_score_label", setdiff(names(WWT.modelling), "condition_overall_score_label"))]
WWT.yes <- WWT.modelling %>% filter(condition_CCTV_app_availability == "yes")
WWT.no <- WWT.modelling %>% filter(condition_CCTV_app_availability == "no")
missing_plot(WWT.yes)
missing_plot(WWT.no)
WWT.yes <- WWT.yes[, -9]
WWT.no <- WWT.no[, -9]
summary(WWT.modelling$condition_overall_score_label)
summary(WWT.yes$condition_overall_score_label)
summary(WWT.no$condition_overall_score_label)
set.seed(123)
rows_to_move <- which(WWT.no$condition_overall_score_label == "5")
num_to_select <- min(10, length(rows_to_move))
selected_rows <- sample(rows_to_move, num_to_select)
WWT.yes <- WWT.yes %>% rbind(WWT.no[selected_rows, ])
WWT.no <- WWT.no[-selected_rows,]
summary(WWT.yes$condition_overall_score_label)
summary(WWT.no$condition_overall_score_label)
# Convert data frames to matricies and make data and label sets
WWT.yes.train.matrix <- as.matrix(WWT.yes.train[, -1])
set.seed(749)
sample.index <- sample(1:nrow(WWT.yes), size = 0.8 * nrow(WWT.yes))
WWT.yes.train <- WWT.yes[sample.index, ]
WWT.yes.test <- WWT.yes[-sample.index, ]
# Convert data frames to matricies and make data and label sets
WWT.yes.train.matrix <- as.matrix(WWT.yes.train[, -1])
WWT.yes.train.label <- WWT.yes.train$condition_overall_score_label
WWT.yes.test.matrix <- as.matrix(WWT.yes.test[,-1])
WWT.yes.test.label <- WWT.yes.test$condition_overall_score_label
WWT.no.matrix <- as.matrix(WWT.no[,-1])
WWT.no.label <- WWT.no$condition_overall_score_label
View(WWT.yes.test.matrix)
boosted.conditiontree1 <- xgboost(data = WWT.yes.train.matrix, label = WWT.yes.train.label, max_depth = 4, eta = 1, nthreads = 2, nrounds = 50, num_classes = 5, objective = "multi:softprob", verbose = 1 )
boosted.conditiontree1 <- xgboost(data = WWT.yes.train.matrix, label = WWT.yes.train.label, max_depth = 4, eta = 1, nthreads = 2, nrounds = 50, num_class = 5, objective = "multi:softprob", verbose = 1 )
# Convert data frames to matricies and make data and label sets
WWT.yes.train.matrix <- model.matrix(WWT.yes.train[, -1])
View(WWT.yes.test.matrix)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
WWT_prior <- read_xlsx("C:/Users/SSabharwal/OneDrive - Watercare Services Limited/Pred_Modelling_Condition/WWT_prior/WWT_prioritisation_final.xlsx")
# Getting rid of useless columns
WWT_prior <- WWT_prior %>% select(-GIS_ID)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
WWT_prior <- read_xlsx("C:/Users/SSabharwal/OneDrive - Watercare Services Limited/Pred_Modelling_Condition/WWT_prior/WWT_prioritisation_final.xlsx")
# Getting rid of useless columns
WWT_prior <- WWT_prior %>% select(-GIS_ID)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
WT_prior <- read_xlsx("C:/Users/SSabharwal/OneDrive - Watercare Services Limited/Pred_Modelling_Condition/WT_prior/WT_prioritisation_final.xlsx")
# Cleaning out columns and variables that are not needed
WT_prior <- WT_prior %>% select(-OBJECTID)
WT_prior <- WT_prior %>% select(-WSL_OBJECTID)
WT_prior <- WT_prior %>% select(-GIS_ID)
WT_prior <- WT_prior %>% select(-EQUIP_ID)
WT_prior <- WT_prior %>% select(-COMPKEY)
WT_prior <- WT_prior %>% select(-FAC_CODE)
WT_prior <- WT_prior %>% select(-FAC_DESC)
WT_prior <- WT_prior %>% select(-FAC_DESC)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
WT_prior <- read_xlsx("C:/Users/SSabharwal/OneDrive - Watercare Services Limited/Pred_Modelling_Condition/WT_prior/WT_prioritisation_final.xlsx")
# Cleaning out columns and variables that are not needed
WT_prior <- WT_prior %>% select(-OBJECTID)
WT_prior <- WT_prior %>% select(-WSL_OBJECTID)
WT_prior <- WT_prior %>% select(-GIS_ID)
WT_prior <- WT_prior %>% select(-EQUIP_ID)
WT_prior <- WT_prior %>% select(-COMPKEY)
WT_prior <- WT_prior %>% select(-FAC_CODE)
WT_prior <- WT_prior %>% select(-FAC_DESC)
WT_prior <- WT_prior %>% select(-PROCESS)
WT_prior <- WT_prior %>% select(-GRP)
WT_prior <- WT_prior %>% select(-POSITION)
WT_prior <- WT_prior %>% select(-STATUS)
WT_prior <- WT_prior %>% select(-LINING)
WT_prior <- WT_prior %>% select(-ACCURACY)
WT_prior <- WT_prior %>% select(-TYPE)
WT_prior <- WT_prior %>% select(-DATASOURCE)
WT_prior <- WT_prior %>% select(-SERVICE)
WT_prior <- WT_prior %>% select(-SUBTYPE)
WT_prior <- WT_prior %>% select(-HACOMPKEY)
WT_prior <- WT_prior %>% select(-R_STAT)
WT_prior <- WT_prior %>% select(-R_MAT)
WT_prior <- WT_prior %>% select(-R_DIA)
WT_prior <- WT_prior %>% select(-R_INST)
WT_prior <- WT_prior %>% select(-AQ_TYPE)
WT_prior <- WT_prior %>% select(-USE_AREA)
WT_prior <- WT_prior %>% select(-USE_AREAID)
WT_prior <- WT_prior %>% select(-HAUNITTYPE)
WT_prior <- WT_prior %>% select(-OWN)
WT_prior <- WT_prior %>% select(-R_OWN)
WT_prior <- WT_prior %>% select(-PARLINENO)
WT_prior <- WT_prior %>% select(-LIN_DATE)
WT_prior <- WT_prior %>% select(-PROJ_REF)
WT_prior <- WT_prior %>% select(-F_IwiAOI)
WT_prior <- WT_prior %>% select(-SHAPE_Length)
WT_prior <- WT_prior %>% select(-`New action`)
# Restructuring some columns
# Fixing datatypes
# Making a modelling dataset and an analysis dataset
str(WT_prior)
WT_prior <- WT_prior %>% mutate_if(is.character, as.factor)
str(WT_prior)
WT_prior$INSTALLED <- format(WT_prior$INSTALLED, "%Y")
WT_prior$INSTALLED <- as.numeric(WT_prior$INSTALLED)
str(WT_prior)
summary(WT_prior$MATERIAL)
summary(WT_prior$condition_confidence_scenario)
summary(WT_prior$criticality_confidence_scenario)
WT_prior$condition_overall_score_label <- as.factor(WT_prior$condition_overall_score_label)
setwd("C:/Users/SSabharwal/OneDrive - Watercare Services Limited/Pred_Modelling_Condition/WT_prior")
WT.analysis <- WT_prior
WT.modelling <- WT_prior[,12]
WT.modelling <- WT_prior[,1:12]
View(WT.modelling)
write_csv(WT.modelling, "WT.modelling.csv")
write_csv(WT.analysis, "WT.analysis.csv")
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WT.modelling <- read_csv("WT.modelling.csv")
WT.modelling <- WT.modelling %>% mutate_if(is.character, as.factor)
WT.modelling$condition_overall_score_label <- as.factor(WT.modelling$condition_overall_score_label)
WT.modelling <- WT.modelling[c("condition_overall_score_label", setdiff(names(WT.modelling), "condition_overall_score_label"))]
View(WT.modelling)
str(WT.modelling)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WT.modelling <- read_csv("WT.modelling.csv")
WT.modelling <- WT.modelling %>% mutate_if(is.character, as.factor)
WT.modelling$condition_overall_score_label <- as.factor(WT.modelling$condition_overall_score_label)
WT.modelling <- WT.modelling[c("condition_overall_score_label", setdiff(names(WT.modelling), "condition_overall_score_label"))]
head(WT.modelling)
head(WT.modelling)
set.seed(749)
sample.index <- sample(1:nrow(WT.modelling), size = 0.8 * nrow(WT.modelling))
WT.modelling.train <- WT.modelling[sample.index, ]
WT.modelling.test <- WT.modelling[-sample.index, ]
condition.tree1 <- rpart(condition_overall_score_label~., data = WT.modelling)
plotcp(condition.tree1)
predict1 <- predict(condition.tree1, WT.modelling.test, type = "class")
confMatrix1 <- table(Actual = WT.modelling.test$condition_overall_score_label, Predicted = predict1)
confMatrix1
summary(WT.modelling.test$condition_overall_score_label)
summary(WT.modelling$condition_overall_score_label)
summary(WT.modelling.train$condition_overall_score_label)
set.seed(749)
sample.index <- sample(1:nrow(WT.modelling), size = 0.8 * nrow(WT.modelling))
WT.modelling.train <- WT.modelling[sample.index, ]
WT.modelling.test <- WT.modelling[-sample.index, ]
rows_to_move <- which(WT.modelling.train$condition_overall_score_label == "5")
num_to_select <- max(1, length(rows_to_move))
selected_rows <- sample(rows_to_move, num_to_select)
WT.modelling.test <- WT.modelling.test %>% rbind(WT.modelling.train[selected_rows, ])
WT.modelling.train <- WT.modelling.train[-selected_rows,]
summary(WT.modelling.train$condition_overall_score_label)
set.seed(749)
sample.index <- sample(1:nrow(WT.modelling), size = 0.8 * nrow(WT.modelling))
WT.modelling.train <- WT.modelling[sample.index, ]
WT.modelling.test <- WT.modelling[-sample.index, ]
rows_to_move <- which(WT.modelling.train$condition_overall_score_label == "5")
selected_rows <- sample(rows_to_move, 1)
WT.modelling.test <- WT.modelling.test %>% rbind(WT.modelling.train[selected_rows, ])
WT.modelling.train <- WT.modelling.train[-selected_rows,]
summary(WT.modelling.train$condition_overall_score_label)
summary(WT.modelling.test$condition_overall_score_label)
condition.tree1 <- rpart(condition_overall_score_label~., data = WT.modelling)
plotcp(condition.tree1)
predict1 <- predict(condition.tree1, WT.modelling.test, type = "class")
confMatrix1 <- table(Actual = WT.modelling.test$condition_overall_score_label, Predicted = predict1)
confMatrix1
sum(diag(confMatrix1)) / nrow(WWT.modelling.test)
sum(diag(confMatrix1)) / nrow(WT.modelling.test)
condition.tree1 <- rpart(condition_overall_score_label~., data = WT.modelling)
plotcp(condition.tree1)
printcp(condition.tree1)
plot(condition.tree1, margin = 0.02)
text(condition.tree1, pretty = 2)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WT.modelling <- read_csv("WT.modelling.csv")
WT.modelling <- WT.modelling %>% mutate_if(is.character, as.factor)
WT.modelling$condition_overall_score_label <- as.factor(WT.modelling$condition_overall_score_label)
WT.modelling <- WT.modelling[c("condition_overall_score_label", setdiff(names(WT.modelling), "condition_overall_score_label"))]
head(WT.modelling)
WT.modelling <- WT.modelling %>% select(-condition_overall_score)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WT.modelling <- read_csv("WT.modelling.csv")
WT.modelling <- WT.modelling %>% mutate_if(is.character, as.factor)
WT.modelling$condition_overall_score_label <- as.factor(WT.modelling$condition_overall_score_label)
WT.modelling <- WT.modelling[c("condition_overall_score_label", setdiff(names(WT.modelling), "condition_overall_score_label"))]
head(WT.modelling)
WT.modelling <- WT.modelling[,-6]
set.seed(749)
sample.index <- sample(1:nrow(WT.modelling), size = 0.8 * nrow(WT.modelling))
WT.modelling.train <- WT.modelling[sample.index, ]
WT.modelling.test <- WT.modelling[-sample.index, ]
rows_to_move <- which(WT.modelling.train$condition_overall_score_label == "5")
selected_rows <- sample(rows_to_move, 1)
WT.modelling.test <- WT.modelling.test %>% rbind(WT.modelling.train[selected_rows, ])
WT.modelling.train <- WT.modelling.train[-selected_rows,]
condition.tree1 <- rpart(condition_overall_score_label~., data = WT.modelling)
plotcp(condition.tree1)
printcp(condition.tree1)
predict1 <- predict(condition.tree1, WT.modelling.test, type = "class")
confMatrix1 <- table(Actual = WT.modelling.test$condition_overall_score_label, Predicted = predict1)
confMatrix1
sum(diag(confMatrix1)) / nrow(WT.modelling.test)
plot(condition.tree1, margin = 0.02)
text(condition.tree1, pretty = 2)
plot(condition.tree1, margin = 0.02)
text(condition.tree1, cex = 0.5)
plot(condition.tree1, margin = 2)
text(condition.tree1, cex = 0.5)
plot(condition.tree1, margin = 0.05)
text(condition.tree1, cex = 0.5)
plot(condition.tree1, margin = 0.05)
text(condition.tree1, cex = 0.6)
rf_model <- ranger(condition_overall_score_label ~ ., data = WT.modelling, trees = 10000, mtry = 5)
predict2 <- predict(rf_model, WT.modelling.test)$predictions
confMatrix2 <- table(Actual = WT.modelling.test$condition_overall_score_label, Predicted = predict2)
confMatrix2
sum(diag(confMatrix2)) / nrow(WT.modelling.test)
rf_model <- ranger(condition_overall_score_label ~ ., data = WT.modelling, trees = 10000, mtry = 5)
predict2 <- predict(rf_model, WT.modelling.test)$predictions
confMatrix2 <- table(Actual = WT.modelling.test$condition_overall_score_label, Predicted = predict2)
confMatrix2
sum(diag(confMatrix2)) / nrow(WT.modelling.test)
plot(rf_model)
rf_model <- ranger(condition_overall_score_label ~ ., data = WT.modelling, trees = 10000, mtry = 5)
predict2 <- predict(rf_model, WT.modelling.test)$predictions
confMatrix2 <- table(Actual = WT.modelling.test$condition_overall_score_label, Predicted = predict2)
confMatrix2
sum(diag(confMatrix2)) / nrow(WT.modelling.test)
summary(rf_model)
rf_model <- ranger(condition_overall_score_label ~ ., data = WT.modelling.train, trees = 10000, mtry = 5)
predict2 <- predict(rf_model, WT.modelling.test)$predictions
confMatrix2 <- table(Actual = WT.modelling.test$condition_overall_score_label, Predicted = predict2)
confMatrix2
sum(diag(confMatrix2)) / nrow(WT.modelling.test)
summary(rf_model)
WT.modelling.train.matrix <- model.matrix(~. - 1, WWT.modelling.train[, -1])
WT.modelling.train.matrix <- model.matrix(~. - 1, WT.modelling.train[, -1])
WT.modelling.train.label <- as.integer(WT.modelling.train$condition_overall_score_label) - 1
WT.modelling.test.matrix <- model.matrix(~. -1 , WT.modelling.test[,-1])
WT.modelling.test.label <- as.integer(WT.modelling.test$condition_overall_score_label) -1
boosted.conditiontree1 <- xgboost(data = WT.modelling.train.matrix, label = WWT.yes.train.label, max_depth = 10, eta = 1, nthreads = 2, nrounds = 50, num_class = 6, objective = "multi:softmax", verbose = 1 )
boosted.conditiontree1 <- xgboost(data = WT.modelling.train.matrix, label = WT.modelling.train.label, max_depth = 10, eta = 1, nthreads = 2, nrounds = 50, num_class = 6, objective = "multi:softmax", verbose = 1 )
xgb.plot.tree(model = boosted.conditiontree1)
predict3 <- predict(boosted.conditiontree1, WT.modelling.test.matrix)
confMatrix3 <- table(Actual = WT.modelling.test.label,
Predicted = predict3)
confMatrix3
sum(diag(confMatrix3)) / nrow(WT.modelling.test.matrix)
