"Suburb"
))]
WWL.modelling$condition_cctv_structural_condition_score <- as.factor(WWL.modelling$condition_cctv_structural_condition_score)
WWL.yes <- filter(WWL.modelling, condition_Confidence_Scenario == "CCTV Available")
WWL.no <- filter(WWL.modelling, condition_Confidence_Scenario == "CCTV NOT Available")
WWL.yes <- WWL.yes[, !(colnames(WWL.modelling) %in% c(
"condition_Confidence_Scenario"
))]
WWL.no <- WWL.no[, !(colnames(WWL.modelling) %in% c(
"condition_Confidence_Scenario"
))]
N <- nrow(WWL.yes)
C <- length(unique(WWL.yes$condition_overall_score_label))
class_counts <- table(WWL.yes$condition_overall_score_label)
class_weights <- N / (C * class_counts)
weights <- class_weights[as.character(WWL.yes$condition_overall_score_label)]
condition.tree1 <- rpart(condition_cctv_structural_condition_score~., data = WWL.yes, weights = weights)
plot(condition.tree1)
printcp(condition.tree1)
predict1 <- predict(condition.tree1, WWL.no)
confMatrix1 <- table(Actual = WWL.no, Predicted = predict1)
predict1 <- predict(condition.tree1, WWL.no)
confMatrix1 <- table(Actual = WWL.no$condition_overall_score_label, Predicted = predict1)
length(WWL.yes)
length(WWL.no)
predict1 <- predict(condition.tree1, WWL.no)
confMatrix1 <- table(Actual = WWL.no$condition_overall_score_label, Predicted = predict1)
predict1 <- predict(condition.tree1, WWL.no)
confMatrix1 <- table(Predicted = predict1, Actual = WWL.no$condition_overall_score_label)
missing_plot(WWL.no)
length(WWL.no$condition_overall_score_label)
length(predict1)
View(predict1)
predict1 <- predict(condition.tree1, WWL.no, type = "class")
confMatrix1 <- table(Predicted = predict1, Actual = WWL.no$condition_overall_score_label)
confMatrix1
sum(diag(confMatrix1)) / nrow(WWL.no)
head(WWL.modelling)
print(levels(WWL.yes$condition_overall_score_label))
print(levels(WWL.no$condition_overall_score_label))
head(WWL.no)
head(WWL.yes)
levels(predict1)
levels(WWL.no$condition_overall_score_label) <- levels(WWL.yes$condition_overall_score_label)
predict1 <- predict(condition.tree1, WWL.no, type = "class")
confMatrix1 <- table(Predicted = predict1, Actual = WWL.no$condition_overall_score_label)
confMatrix1
levels(WWL.no$condition_overall_score_label) <- levels(WWL.yes$condition_overall_score_label)
predict1 <- predict(condition.tree1, WWL.no, type = "response")
levels(WWL.no$condition_overall_score_label) <- levels(WWL.yes$condition_overall_score_label)
predict1 <- predict(condition.tree1, WWL.no, type = "class")
confMatrix1 <- table(Predicted = predict1, Actual = WWL.no$condition_overall_score_label)
confMatrix1
plot(condition.tree1, margin = 0.02)
text(condition.tree1, pretty = 2)
printcp(condition.tree1)
rf_model <- ranger(condition_overall_score_label ~ ., data = WWL.yes, trees = 100000, mtry = 5, case.weights = weights)
predict4 <- predict(rf_model, WWL.no)$predictions
confMatrix4 <- table(Actual = WWL.no$condition_overall_score_label, Predicted = predict4)
confMatrix4
sum(diag(confMatrix4)) / nrow(WWL.no)
table(WWL.yes$condition_overall_score_label)
class_weights <- 1 / table(WWL.yes$condition_overall_score_label)
class_weights <- class_weights / sum(class_weights)
rf_model <- ranger(condition_overall_score_label ~ ., data = WWL.yes, trees = 100000, mtry = 5, classwt = class_weights)
predict4 <- predict(rf_model, WWL.no)$predictions
confMatrix4 <- table(Actual = WWL.no$condition_overall_score_label, Predicted = predict4)
confMatrix4
sum(diag(confMatrix4)) / nrow(WWL.no)
table(WWL.yes$condition_overall_score_label)
class_weights <- 1 / table(WWL.yes$condition_overall_score_label)
class_weights <- class_weights / sum(class_weights)
rf_model <- ranger(condition_overall_score_label ~ ., data = WWL.yes, trees = 100000, mtry = 5, class.weights = class_weights)
predict4 <- predict(rf_model, WWL.no)$predictions
confMatrix4 <- table(Actual = WWL.no$condition_overall_score_label, Predicted = predict4)
confMatrix4
sum(diag(confMatrix4)) / nrow(WWL.no)
# Convert data frames to matricies and make data and label sets
WWL.yes.matrix <- model.matrix(~. -1 , WWL.yes[,-1])
WWL.yes.label <- as.integer(WWL.yes$condition_overall_score_label) -1
WWL.no.matrix <- model.matrix(~. -1 , WWT.no[,-1])
# Convert data frames to matricies and make data and label sets
WWL.yes.matrix <- model.matrix(~. -1 , WWL.yes[,-1])
WWL.yes.label <- as.integer(WWL.yes$condition_overall_score_label) -1
WWL.no.matrix <- model.matrix(~. -1 , WWL.no[,-1])
WWL.no.label <- as.integer(WWL.no$condition_overall_score_label) -1
boosted.conditiontree1 <- xgboost(data = WWL.yes.matrix, label = WWL.yes.label, max_depth = 10, eta = 1, nthreads = 2, nrounds = 50, num_class = 6, objective = "multi:softmax", verbose = 1 )
pred7 <- predict(boosted.conditiontree1, WWL.no.matrix)
confMatrix7 <- table(Actual = WWL.no.label,
Predicted = pred7)
pred7 <- predict(boosted.conditiontree1, WWL.no.matrix, type = "class")
confMatrix7 <- table(Actual = WWL.no.label,
Predicted = pred7)
pred7 <- predict(boosted.conditiontree1, WWL.no.matrix)
confMatrix7 <- table(Actual = WWL.no.label,
Predicted = pred7)
WWL.no.label <- WWL.no.label[1:(nrow(WWL.no.label) - 8), ]
WWL.no.label <- WWL.no.label[1:(length(WWL.no.label) - 8), ]
WWL.no.label <- WWL.no.label[1:(length(WWL.no.label) - 8)]
pred7 <- predict(boosted.conditiontree1, WWL.no.matrix)
confMatrix7 <- table(Actual = WWL.no.label,
Predicted = pred7)
confMatrix7
sum(diag(confMatrix7)) / length(WWL.no.label)
boosted.conditiontree1 <- xgboost(data = WWT.yes.train.matrix, label = WWT.yes.train.label, max_depth = 3, min_child_weight = 5, eta = 1, nthreads = 2, nrounds = 20, num_class = 6, objective = "multi:softmax", verbose = 1, lambda = 1 )
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WWT.modelling <- read_csv("WWT.modelling.csv")
WWT.modelling <- WWT.modelling %>% mutate_if(is.character, as.factor)
WWT.modelling$condition_overall_score_label <- as.factor(WWT.modelling$condition_overall_score_label)
boosted.conditiontree1 <- xgboost(data = WWT.yes.train.matrix, label = WWT.yes.train.label, max_depth = 3, min_child_weight = 5, eta = 1, nthreads = 2, nrounds = 20, num_class = 6, objective = "multi:softmax", verbose = 1, lambda = 1 )
# Convert data frames to matricies and make data and label sets
library(gbm)
WWT.yes.train.matrix <- model.matrix(~. - 1, WWT.yes.train[, -1])
knitr::opts_chunk$set(message = FALSE)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WWT.modelling <- read_csv("WWT.modelling.csv")
WWT.modelling <- WWT.modelling %>% mutate_if(is.character, as.factor)
WWT.modelling$condition_overall_score_label <- as.factor(WWT.modelling$condition_overall_score_label)
WWT.modelling <- WWT.modelling[c("condition_overall_score_label", setdiff(names(WWT.modelling), "condition_overall_score_label"))]
WWT.yes <- WWT.modelling %>% filter(condition_CCTV_app_availability == "yes")
WWT.no <- WWT.modelling %>% filter(condition_CCTV_app_availability == "no")
missing_plot(WWT.yes)
missing_plot(WWT.no)
WWT.yes <- WWT.yes[, -9]
WWT.no <- WWT.no[, -9]
summary(WWT.modelling$condition_overall_score_label)
WWT.modelling <- read_csv("WWT.modelling.csv")
WWT.modelling <- WWT.modelling %>% mutate_if(is.character, as.factor)
WWT.yes <- WWT.modelling %>% filter(condition_CCTV_app_availability == "yes")
WWT.no <- WWT.modelling %>% filter(condition_CCTV_app_availability == "no")
missing_plot(WWT.yes)
missing_plot(WWT.no)
WWT.yes <- WWT.yes %>% dplyr::select(-condition_CCTV_app_availability)
WWT.no <- WWT.no %>% dplyr::select(-condition_CCTV_app_availability)
summary(WWT.modelling$condition_CCTV_score)
summary(WWT.yes$condition_CCTV_score)
summary(WWT.no$condition_CCTV_score)
set.seed(123)
rows_to_move <- which(WWT.no$condition_CCTV_score== "5")
num_to_select <- min(5, length(rows_to_move))
selected_rows <- sample(rows_to_move, num_to_select)
WWT.yes <- WWT.yes %>% rbind(WWT.no[selected_rows, ])
WWT.no <- WWT.no[-selected_rows,]
summary(WWT.yes$condition_CCTV_score)
summary(WWT.no$condition_CCTV_score)
WWT.yes <- WWT.yes %>% filter(condition_CCTV_score != "None")
WWT.no <- WWT.no %>% filter(condition_CCTV_score != "None")
set.seed(749)
sample.index <- sample(1:nrow(WWT.yes), size = 0.8 * nrow(WWT.yes))
WWT.yes.train <- WWT.yes[sample.index, ]
WWT.yes.test <- WWT.yes[-sample.index, ]
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
predictions <- predict(m.logistic, newdata = WWT.yes.test$MATERIAL)
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
predictions <- predict(m.logistic, newdata = WWT.yes.test)
confMatrix7 <- table(Actual = WWT.yes.test$condition_CCTV_score,
Predicted = predictions)
confMatrix7
sum(diag(confMatrix7)) / length(WWT.yes.test$condition_CCTV_score)
confMatrix8 <- table(Actual = WWT.no$condition_CCTV_score, Predicted = predicted(m.logistic, newdata = WWT.no$MATERIAL))
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
predictions <- predict(m.logistic, newdata = WWT.yes.test)
confMatrix7 <- table(Actual = WWT.yes.test$condition_CCTV_score,
Predicted = predictions)
confMatrix7
sum(diag(confMatrix7)) / length(WWT.yes.test$condition_CCTV_score)
confMatrix8 <- table(Actual = WWT.no$condition_CCTV_score, Predicted = predict(m.logistic, newdata = WWT.no))
summary(m.logistic)
summary(predictions)
set.seed(749)
sample.index <- sample(1:nrow(WWT.yes), size = 0.8 * nrow(WWT.yes))
WWT.yes.train <- WWT.yes[sample.index, ]
WWT.yes.test <- WWT.yes[-sample.index, ]
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
predictions <- predict(m.logistic, newdata = WWT.yes.test)
confMatrix7 <- table(Actual = WWT.yes.test$condition_CCTV_score,
Predicted = predictions)
confMatrix7
summary(m.logistic)
summary(predictions)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 1)
predictor <- function(model, data){
prediction <- predict(model, data)$predictions
confMatrix <- table(Actual = data$condition_CCTV_score, Predicted = prediction)
print(confMatrix)
print(sum(diag(confMatrix)) / nrow(data))
}
predictor(rf_model, WWT.yes.test)
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
predictor(m.logistic, WWT.yes.test)
predictor1 <- function(model, data){
prediction <- predict(model, data)$predictions
confMatrix <- table(Actual = data$condition_CCTV_score, Predicted = prediction)
print(confMatrix)
print(sum(diag(confMatrix)) / nrow(data))
}
predictor2 <- function(model, data){
prediction <- predict(model, data)
confMatrix <- table(Actual = data$condition_CCTV_score, Predicted = prediction)
print(confMatrix)
print(sum(diag(confMatrix)) / nrow(data))
}
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
predictor2(m.logistic, WWT.yes.test)
summary(m.logistic)
condition.tree <- rpart(condition_CCTV_score~ MATERIAL, data = WWT.yes.train)
plotcp(condition.tree)
predictor2(condition.tree, WWT.yes.test)
predictor1(condition.tree, WWT.yes.test)
predictor3 <- function(model, data){
prediction <- predict(model, data, type = "class")
confMatrix <- table(Actual = data$condition_CCTV_score, Predicted = prediction)
print(confMatrix)
print(sum(diag(confMatrix)) / nrow(data))
}
predictor3(condition.tree, WWT.yes.test)
plot(condition.tree, margin = 0.02)
text(condition.tree, pretty = 2)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 1)
predictor(rf_model, WWT.yes.test)
svm_model <- svm(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, kernal = "linear", cost = 1, scale = TRUE)
library(e1071)
svm_model <- svm(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, kernal = "linear", cost = 1, scale = TRUE)
predictor2(svm_model, WWT.yes.test)
library(e1071)
svm_model <- svm(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, kernal = "linear", cost = 1, scale = TRUE)
summary(svm_model)
predictor2(svm_model, WWT.yes.test)
# Predictions with the low confidence dataset using the multinomal regression model
set.seed(1)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton1 <- predictor2(m.logistic, WWT.no.test)
# Predictions with the low confidence dataset using the decision tree model
set.seed(2)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton2 <- predictor3(condition.tree, WWT.no.test)
# Predictions with the low confidence dataset using the random forest model
set.seed(3)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton3 <- predictor1(rf_model, WWT.no.test)
# Predictions with the low confidence dataset using the SVM
set.seed(4)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton4 <- predictor2(svm_model, WWT.no.test)
View(WWT.no)
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ NOM_DIA_MM, data = WWT.yes.train)
predictor2(m.logistic, WWT.yes.test)
summary(m.logistic)
condition.tree <- rpart(condition_CCTV_score~ NOM_DIA_MM, data = WWT.yes.train)
plotcp(condition.tree)
predictor3(condition.tree, WWT.yes.test)
plot(condition.tree, margin = 0.02)
text(condition.tree, pretty = 2)
rf_model <- ranger(condition_CCTV_score ~ NOM_DIA_MM, data = WWT.yes.train, trees = 10000, mtry = 1)
predictor(rf_model, WWT.yes.test)
library(e1071)
svm_model <- svm(condition_CCTV_score ~ NOM_DIA_MM, data = WWT.yes.train, kernal = "linear", cost = 1, scale = TRUE)
summary(svm_model)
predictor2(svm_model, WWT.yes.test)
# Predictions with the low confidence dataset using the multinomal regression model
set.seed(1)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton1 <- predictor2(m.logistic, WWT.no.test)
# Predictions with the low confidence dataset using the decision tree model
set.seed(2)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton2 <- predictor3(condition.tree, WWT.no.test)
# Predictions with the low confidence dataset using the random forest model
set.seed(3)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton3 <- predictor1(rf_model, WWT.no.test)
# Predictions with the low confidence dataset using the SVM
set.seed(4)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton4 <- predictor2(svm_model, WWT.no.test)
# Predictions with the low confidence dataset using the multinomal regression model
set.seed(1)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton1 <- predictor2(m.logistic, WWT.no.test)
# Predictions with the low confidence dataset using the decision tree model
set.seed(2)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton2 <- predictor3(condition.tree, WWT.no.test)
# Predictions with the low confidence dataset using the random forest model
set.seed(3)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton3 <- predictor1(rf_model, WWT.no.test)
# Predictions with the low confidence dataset using the SVM
set.seed(749)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton4 <- predictor2(svm_model, WWT.no.test)
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ condition_instability_score, data = WWT.yes.train)
predictor2(m.logistic, WWT.yes.test)
summary(m.logistic)
condition.tree <- rpart(condition_CCTV_score~condition_instability_Score, data = WWT.yes.train)
condition.tree <- rpart(condition_CCTV_score~condition_instability_score, data = WWT.yes.train)
plotcp(condition.tree)
predictor3(condition.tree, WWT.yes.test)
plot(condition.tree, margin = 0.02)
rf_model <- ranger(condition_CCTV_score ~ condition_instability_score, data = WWT.yes.train, trees = 10000, mtry = 1)
predictor(rf_model, WWT.yes.test)
library(e1071)
svm_model <- svm(condition_CCTV_score ~ condition_instability_score, data = WWT.yes.train, kernal = "linear", cost = 1, scale = TRUE)
summary(svm_model)
predictor2(svm_model, WWT.yes.test)
# Predictions with the low confidence dataset using the multinomal regression model
set.seed(1)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton1 <- predictor2(m.logistic, WWT.no.test)
# Predictions with the low confidence dataset using the random forest model
set.seed(3)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton3 <- predictor1(rf_model, WWT.no.test)
# Predictions with the low confidence dataset using the SVM
set.seed(4)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton4 <- predictor2(svm_model, WWT.no.test)
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ condition_corrosivity_score, data = WWT.yes.train)
predictor2(m.logistic, WWT.yes.test)
summary(m.logistic)
condition.tree <- rpart(condition_CCTV_score~condition_corrosivity_score, data = WWT.yes.train)
plotcp(condition.tree)
rf_model <- ranger(condition_CCTV_score ~ condition_corrosivity_score, data = WWT.yes.train, trees = 10000, mtry = 1)
predictor(rf_model, WWT.yes.test)
library(e1071)
svm_model <- svm(condition_CCTV_score ~ condition_corrositivty_score, data = WWT.yes.train, kernal = "linear", cost = 1, scale = TRUE)
library(e1071)
svm_model <- svm(condition_CCTV_score ~ condition_corrositivity_score, data = WWT.yes.train, kernal = "linear", cost = 1, scale = TRUE)
library(e1071)
svm_model <- svm(condition_CCTV_score ~ condition_corrosivity_score, data = WWT.yes.train, kernal = "linear", cost = 1, scale = TRUE)
summary(svm_model)
predictor2(svm_model, WWT.yes.test)
# Predictions with the low confidence dataset using the multinomal regression model
set.seed(1)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton1 <- predictor2(m.logistic, WWT.no.test)
# Predictions with the low confidence dataset using the decision tree model
set.seed(2)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton2 <- predictor3(condition.tree, WWT.no.test)
# Predictions with the low confidence dataset using the random forest model
set.seed(3)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton3 <- predictor1(rf_model, WWT.no.test)
# Predictions with the low confidence dataset using the SVM
set.seed(4)
WWT.no.test <- WWT.no[sample(1:nrow(WWT.no), size = 0.1 * nrow(WWT.no)), ]
predicton4 <- predictor2(svm_model, WWT.no.test)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 1)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
library(randomForest)
WWL.modelling <- read_csv("WWL.modelling.csv")
WWL.modelling <- WWL.modelling %>% mutate_if(is.character, as.factor)
WWL.modelling$condition_overall_score_label <- as.factor(WWL.modelling$condition_overall_score_label)
head(WWL.modelling)
missing_plot(WWL.modelling)
library(finalfit)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WWL.analysis <- read_csv("WWL.analysis.csv")
WWL.analysis %>% missing_plot()
install.packages("LaTex")
install.packages("tinytex")
install.packages("tinytex")
setwd("C:/Users/SSabharwal/OneDrive - Watercare Services Limited/Pred_Modelling_Condition/WWT_prior")
setwd("C:/Users/SSabharwal/OneDrive - Watercare Services Limited/Pred_Modelling_Condition")
WWL.analysis <- read_csv("WWL_prior/WWL.analysis.csv")
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WWL.analysis <- read_csv("WWL_prior/WWL.analysis.csv")
WWL.analysis %>% missing_plot()
WWT.analysis <- read_csv("WWT_prior/WWT.analysis.csv")
WWT.analysis %>% missing_plot()
WWL.modelling <- read_csv("WWL_prior/WWL.modelling.csv")
WWL.modelling <- WWL.modelling %>% mutate_if(is.character, as.factor)
WWL.modelling$condition_overall_score_label <- as.factor(WWL.modelling$condition_overall_score_label)
head(WWL.modelling)
WWT.modelling <- read_csv("WWT_prior/WWT.modelling.csv")
WWT.modelling <- WWT.modelling %>% mutate_if(is.character, as.factor)
WWT.modelling$condition_overall_score_label <- as.factor(WWT.modelling$condition_overall_score_label)
WWT.modelling <- read_csv("WWT_prior/WWT.modelling.csv")
WWT.modelling <- WWT.modelling %>% mutate_if(is.character, as.factor)
WWT.modelling$condition_overall_score_label <- as.factor(WWT.modelling$condition_overall_score_label)
head(WWT.modelling)
ggplot(WWT.analysis, aes(x = MATERIAL, y = condition_overall_score, fill = MATERIAL)) + geom_boxplot() + labs(
title = "Relationship between Material and Condition",
x = "Material",
y = "Condition Score"
)
ggplot(WWT.analysis, aes(x = INSTALLED, y = condition_overall_score, color = MATERIAL)) + geom_point() + geom_smooth(method = "lm", col = "blue") + labs(
x = "Year of installation",
y = "Condition Score",
title = "Relationship between the installation year of the pipe and it's condition"
)
ggplot(WWT.analysis, aes(x = NOM_DIA_MM, y = condition_overall_score, color = MATERIAL)) + geom_point() + geom_smooth(method = "gam", col = "blue") + labs(
x = "Nominal Diameter of Pipe",
y = "Condition Score",
title = "Relationship between nominal diameter of the pipe and it's condition"
) +  xlim(0, 1500)
ggplot(WWT.analysis, aes(x = LENGTH, y = condition_overall_score, color = MATERIAL)) + geom_point() + geom_smooth(method = "lm", col = "blue")+ labs(
x = "Length of pipe",
y = "Condition Score",
title = "Relationship between the length of the pipe and it's condition"
) + xlim(0, 1000)
ggplot(WWT.analysis, aes(x = criticality_overall_score, y = condition_overall_score, color = MATERIAL)) + geom_point() + geom_smooth(method = "lm", col = "blue") + labs(
x = "Criticality",
y = "Condition",
title = "Relationship between Crticality and Condition"
)
ggplot(WWT.analysis, aes(x = condition_CCTV_app_availability, y = condition_overall_score)) + geom_violin() + labs(
title = "Relationship between the availability of CCTV and Condition",
x = "CCTV availability",
y = "Condition Score"
) + theme_minimal()
View(WWT.analysis)
View(WWT.analysis)
