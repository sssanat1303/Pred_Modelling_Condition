args = list(mean = fit_norm$estimate["mean"], sd = fit_norm$estimate["sd"]),
aes(color = "Normal"), size = 1
) +
# Weibull Distribution
stat_function(
fun = dweibull,
args = list(shape = fit_weibull$estimate["shape"], scale = fit_weibull$estimate["scale"]),
aes(color = "Weibull"), size = 1
) +
# Gamma Distribution
stat_function(
fun = dgamma,
args = list(shape = fit_gamma$estimate["shape"], rate = fit_gamma$estimate["rate"]),
aes(color = "Gamma"), size = 1
) +
# Log-Normal Distribution
stat_function(
fun = dlnorm,
args = list(meanlog = fit_lnorm$estimate["meanlog"], sdlog = fit_lnorm$estimate["sdlog"]),
aes(color = "Log-Normal"), size = 1
) +
# Labels and Theme
labs(
title = "Distribution of Time to First Failure",
x = "Time to First Failure",
y = "Density",
color = "Distributions"  # Legend title
) +
theme_minimal()
observed <- hist(positive, breaks = 30, plot = F)
observed_x <- observed$mids
observed_y <- observed$density
#Compare predicted densities for each distribution
predicted_norm <- dnorm(observed_x, mean = fit_norm$estimate["mean"], sd = fit_norm$estimate["sd"])
predicted_weibull <- dweibull(observed_x, shape = fit_weibull$estimate["shape"], scale = fit_weibull$estimate["scale"])
predicted_gamma <- dgamma(observed_x, shape = fit_gamma$estimate["scale"], rate = fit_gamma$estimate["shape"])
predicted_lnorm <- dlnorm(observed_x, meanlog = fit_lnorm$estimate["meanlog"], sdlog = fit_lnorm$estimate["sdlog"])
rmse_norm <- rmse(observed_y, predicted_norm)
rmse_weibull <- rmse(observed_y, predicted_weibull)
rmse_gamma <- rmse(observed_y, predicted_gamma)
rmse_lnorm <- rmse(observed_y, predicted_lnorm)
performance_metrics <- data.frame(
Distribution = c("normal", "weibull", "gamma", "log_normal"),
RMSE = c(rmse_norm, rmse_weibull, rmse_gamma, rmse_lnorm)
)
print(plot)
return(performance_metrics)
}
dist.fitter(result)
MATERIALS <- split(result, result$MATERIAL)
View(MATERIALS)
View(MATERIALS)
#General
dist.fitter(AC)
#General
dist.fitter(AC.analysis)
result$MATERIAL <- factor(result$MATERIAL)
MATERIALS <- split(result, result$MATERIAL)
AC.analysis <- MATERIALS$AC
ALK.analysis <- MATERIALS$ALK
CI.analysis <- MATERIALS$CI
CLS.analysis <- MATERIALS$CLS
CONC.analysis <- MATERIALS$CONC
CU.analysis <- MATERIALS$CU
DI.analysis <- MATERIALS$DI
MS.analysis <- MATERIALS$MS
PE.analysis <- MATERIALS$PE
PP.analysis <- MATERIALS$PP
PVCU.analysis <- MATERIALS$`PVC-U`
#General
dist.fitter(AC.analysis)
View(AC.analysis)
summary(AC.analysis$time_to_first_failure)
dist.fitter <- function(data){
positive <- data$time_to_first_failure #[data$time_to_first_failure > 0]
fit_norm <- fitdist(positive, "norm")
fit_weibull <- fitdist(positive, "weibull", method = "mle", lower = c(0, 0))
fit_gamma <- fitdist(positive, "gamma", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 1))
fit_lnorm <- fitdist(positive, "lnorm")
plot <- ggplot(data, aes(x = column)) +
# Histogram
geom_histogram(aes(y = ..density..), binwidth = 0.5, color = "black", fill = "blue", position = "identity") +
# Normal Distribution
stat_function(
fun = dnorm,
args = list(mean = fit_norm$estimate["mean"], sd = fit_norm$estimate["sd"]),
aes(color = "Normal"), size = 1
) +
# Weibull Distribution
stat_function(
fun = dweibull,
args = list(shape = fit_weibull$estimate["shape"], scale = fit_weibull$estimate["scale"]),
aes(color = "Weibull"), size = 1
) +
# Gamma Distribution
stat_function(
fun = dgamma,
args = list(shape = fit_gamma$estimate["shape"], rate = fit_gamma$estimate["rate"]),
aes(color = "Gamma"), size = 1
) +
# Log-Normal Distribution
stat_function(
fun = dlnorm,
args = list(meanlog = fit_lnorm$estimate["meanlog"], sdlog = fit_lnorm$estimate["sdlog"]),
aes(color = "Log-Normal"), size = 1
) +
# Labels and Theme
labs(
title = "Distribution of Time to First Failure",
x = "Time to First Failure",
y = "Density",
color = "Distributions"  # Legend title
) +
theme_minimal()
observed <- hist(positive, breaks = 30, plot = F)
observed_x <- observed$mids
observed_y <- observed$density
#Compare predicted densities for each distribution
predicted_norm <- dnorm(observed_x, mean = fit_norm$estimate["mean"], sd = fit_norm$estimate["sd"])
predicted_weibull <- dweibull(observed_x, shape = fit_weibull$estimate["shape"], scale = fit_weibull$estimate["scale"])
predicted_gamma <- dgamma(observed_x, shape = fit_gamma$estimate["scale"], rate = fit_gamma$estimate["shape"])
predicted_lnorm <- dlnorm(observed_x, meanlog = fit_lnorm$estimate["meanlog"], sdlog = fit_lnorm$estimate["sdlog"])
rmse_norm <- rmse(observed_y, predicted_norm)
rmse_weibull <- rmse(observed_y, predicted_weibull)
rmse_gamma <- rmse(observed_y, predicted_gamma)
rmse_lnorm <- rmse(observed_y, predicted_lnorm)
performance_metrics <- data.frame(
Distribution = c("normal", "weibull", "gamma", "log_normal"),
RMSE = c(rmse_norm, rmse_weibull, rmse_gamma, rmse_lnorm)
)
print(plot)
return(performance_metrics)
}
#General
dist.fitter(AC.analysis)
#General
dist.fitter(CONC.analysis)
dist.fitter <- function(data){
positive <- data$time_to_first_failure[data$time_to_first_failure > 0]
fit_norm <- fitdist(positive, "norm")
fit_weibull <- fitdist(positive, "weibull", method = "mle", lower = c(0, 0))
fit_gamma <- fitdist(positive, "gamma", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 1))
fit_lnorm <- fitdist(positive, "lnorm")
plot <- ggplot(data, aes(x = positive)) +
# Histogram
geom_histogram(aes(y = ..density..), binwidth = 0.5, color = "black", fill = "blue", position = "identity") +
# Normal Distribution
stat_function(
fun = dnorm,
args = list(mean = fit_norm$estimate["mean"], sd = fit_norm$estimate["sd"]),
aes(color = "Normal"), size = 1
) +
# Weibull Distribution
stat_function(
fun = dweibull,
args = list(shape = fit_weibull$estimate["shape"], scale = fit_weibull$estimate["scale"]),
aes(color = "Weibull"), size = 1
) +
# Gamma Distribution
stat_function(
fun = dgamma,
args = list(shape = fit_gamma$estimate["shape"], rate = fit_gamma$estimate["rate"]),
aes(color = "Gamma"), size = 1
) +
# Log-Normal Distribution
stat_function(
fun = dlnorm,
args = list(meanlog = fit_lnorm$estimate["meanlog"], sdlog = fit_lnorm$estimate["sdlog"]),
aes(color = "Log-Normal"), size = 1
) +
# Labels and Theme
labs(
title = "Distribution of Time to First Failure",
x = "Time to First Failure",
y = "Density",
color = "Distributions"  # Legend title
) +
theme_minimal()
observed <- hist(positive, breaks = 30, plot = F)
observed_x <- observed$mids
observed_y <- observed$density
#Compare predicted densities for each distribution
predicted_norm <- dnorm(observed_x, mean = fit_norm$estimate["mean"], sd = fit_norm$estimate["sd"])
predicted_weibull <- dweibull(observed_x, shape = fit_weibull$estimate["shape"], scale = fit_weibull$estimate["scale"])
predicted_gamma <- dgamma(observed_x, shape = fit_gamma$estimate["scale"], rate = fit_gamma$estimate["shape"])
predicted_lnorm <- dlnorm(observed_x, meanlog = fit_lnorm$estimate["meanlog"], sdlog = fit_lnorm$estimate["sdlog"])
rmse_norm <- rmse(observed_y, predicted_norm)
rmse_weibull <- rmse(observed_y, predicted_weibull)
rmse_gamma <- rmse(observed_y, predicted_gamma)
rmse_lnorm <- rmse(observed_y, predicted_lnorm)
performance_metrics <- data.frame(
Distribution = c("normal", "weibull", "gamma", "log_normal"),
RMSE = c(rmse_norm, rmse_weibull, rmse_gamma, rmse_lnorm)
)
print(plot)
return(performance_metrics)
}
#General
dist.fitter(CONC.analysis)
#General
dist.fitter(AC.analysis)
#General
dist.fitter(ALK.analysis)
#General
dist.fitter(CI.analysis)
dist.fitter(CLS.analysis)
dist.fitter(CONC.analysis)
dist.fitter(CU.analysis)
dist.fitter(DI.analysis)
dist.fitter(MS.analysis)
dist.fitter(PE.analysis)
summary(PE.analysis$time_to_first_failure)
dist.fitter(PP.analysis)
dist.fitter(PVCU.analysis)
knitr::opts_chunk$set(message = FALSE)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WWT.modelling <- read_csv("WWT.modelling.csv")
WWT.modelling <- WWT.modelling %>% mutate_if(is.character, as.factor)
WWT.modelling$condition_overall_score_label <- as.factor(WWT.modelling$condition_overall_score_label)
View(WWT.modelling)
getwd()
setwd("C:/Users/SSabharwal/OneDrive - Watercare Services Limited/Pred_Modelling_Condition/WWT_prior")
head(WWT.modelling)
WWT.yes <- WWT.modelling %>% filter(condition_CCTV_app_availability == "yes")
WWT.no <- WWT.modelling %>% filter(condition_CCTV_app_availability == "no")
missing_plot(WWT.yes)
missing_plot(WWT.no)
WWT.yes <- WWT.yes %>% dplyr::select(-condition_CCTV_app_availability)
WWT.no <- WWT.no %>% dplyr::select(-condition_CCTV_app_availability)
summary(WWT.modelling$condition_CCTV_score)
summary(WWT.yes$condition_CCTV_score)
summary(WWT.no$condition_overall_score_label)
summary(WWT.yes$condition_CCTV_score)
summary(WWT.no$condition_CCTV_score)
set.seed(123)
rows_to_move <- which(WWT.no$condition_CCTV_score== "5")
num_to_select <- min(10, length(rows_to_move))
selected_rows <- sample(rows_to_move, num_to_select)
WWT.yes <- WWT.yes %>% rbind(WWT.no[selected_rows, ])
WWT.no <- WWT.no[-selected_rows,]
summary(WWT.yes$condition_CCTV_score)
summary(WWT.no$condition_CCTV_score)
WWT.yes <- WWT.modelling %>% filter(condition_CCTV_app_availability == "yes")
WWT.no <- WWT.modelling %>% filter(condition_CCTV_app_availability == "no")
missing_plot(WWT.yes)
missing_plot(WWT.no)
WWT.modelling <- WWT.modelling %>% dplyr::select(-condition_overall_score_label)
WWT.yes <- WWT.modelling %>% filter(condition_CCTV_app_availability == "yes")
WWT.no <- WWT.modelling %>% filter(condition_CCTV_app_availability == "no")
missing_plot(WWT.yes)
missing_plot(WWT.no)
WWT.yes <- WWT.yes %>% dplyr::select(-condition_CCTV_app_availability)
WWT.no <- WWT.no %>% dplyr::select(-condition_CCTV_app_availability)
summary(WWT.modelling$condition_CCTV_score)
summary(WWT.yes$condition_CCTV_score)
summary(WWT.no$condition_CCTV_score)
set.seed(123)
rows_to_move <- which(WWT.no$condition_CCTV_score== "5")
num_to_select <- min(5, length(rows_to_move))
selected_rows <- sample(rows_to_move, num_to_select)
WWT.yes <- WWT.yes %>% rbind(WWT.no[selected_rows, ])
WWT.no <- WWT.no[-selected_rows,]
summary(WWT.yes$condition_CCTV_score)
summary(WWT.no$condition_CCTV_score)
set.seed(749)
sample.index <- sample(1:nrow(WWT.yes), size = 0.8 * nrow(WWT.yes))
WWT.yes.train <- WWT.yes[sample.index, ]
WWT.yes.test <- WWT.yes[-sample.index, ]
WWT.modelling <- WWT.modelling %>% dplyr::select(-condition_overall_score_label)
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WWT.modelling <- read_csv("WWT.modelling.csv")
WWT.modelling <- WWT.modelling %>% mutate_if(is.character, as.factor)
WWT.modelling$condition_overall_score_label <- as.factor(WWT.modelling$condition_overall_score_label)
WWT.modelling <- WWT.modelling %>% dplyr::select(-condition_overall_score_label)
WWT.yes <- WWT.modelling %>% filter(condition_CCTV_app_availability == "yes")
WWT.no <- WWT.modelling %>% filter(condition_CCTV_app_availability == "no")
missing_plot(WWT.yes)
missing_plot(WWT.no)
WWT.yes <- WWT.yes %>% dplyr::select(-condition_CCTV_app_availability)
WWT.no <- WWT.no %>% dplyr::select(-condition_CCTV_app_availability)
summary(WWT.modelling$condition_CCTV_score)
summary(WWT.yes$condition_CCTV_score)
summary(WWT.no$condition_CCTV_score)
set.seed(123)
rows_to_move <- which(WWT.no$condition_CCTV_score== "5")
num_to_select <- min(5, length(rows_to_move))
selected_rows <- sample(rows_to_move, num_to_select)
WWT.yes <- WWT.yes %>% rbind(WWT.no[selected_rows, ])
WWT.no <- WWT.no[-selected_rows,]
summary(WWT.yes$condition_CCTV_score)
summary(WWT.no$condition_CCTV_score)
WWT.yes <- WWT.yes %>% filter(condition_CCTV_score != "None")
WWT.no <- WWT.no %>% filter(condition_CCTV_score != "None")
set.seed(749)
sample.index <- sample(1:nrow(WWT.yes), size = 0.8 * nrow(WWT.yes))
WWT.yes.train <- WWT.yes[sample.index, ]
WWT.yes.test <- WWT.yes[-sample.index, ]
condition.tree1 <- rpart(condition_CCTV_score~., data = WWT.yes.train)
plotcp(condition.tree1)
predict1 <- predict(condition.tree1, WWT.yes.test, type = "class")
confMatrix1 <- table(Actual = WWT.yes.test$condition_CCTV_score, Predicted = predict1)
confMatrix1
sum(diag(confMatrix1)) / nrow(WWT.yes.test)
plot(condition.tree1, margin = 0.02)
text(condition.tree1, pretty = 2)
printcp(condition.tree1)
condition.tree2 <- rpart(condition_overall_score_label~., data = WWT.yes.train)
predict2 <- predict(condition.tree2, WWT.no, type = "class")
predict2 <- predict(condition.tree1, WWT.no, type = "class")
confMatrix2 <- table(Actual = WWT.no$condition_CCTV_score, Predicted = predict2)
confMatrix2
sum(diag(confMatrix2)) / nrow(WWT.no)
rf_model <- ranger(condition_CCTV_score ~ ., data = WWT.yes.train, trees = 10000, mtry = 5)
predict3 <- predict(rf_model, WWT.yes.test)$predictions
confMatrix3 <- table(Actual = WWT.yes.test$condition_CCTV_score, Predicted = predict3)
confMatrix3
sum(diag(confMatrix3)) / nrow(WWT.yes.test)
predict4 <- predict(rf_model, WWT.no)$predictions
confMatrix4 <- table(Actual = WWT.no$condition_CCTV_score, Predicted = predict4)
confMatrix4
sum(diag(confMatrix4)) / nrow(WWT.no)
# Convert data frames to matricies and make data and label sets
library(gbm)
WWT.yes.train.matrix <- model.matrix(~. - 1, WWT.yes.train[, -1])
WWT.yes.train.label <- as.integer(WWT.yes.train$condition_CCTV_score) - 1
WWT.yes.test.matrix <- model.matrix(~. -1 , WWT.yes.test[,-1])
WWT.yes.test.label <- as.integer(WWT.yes.test$condition_CCTV_score) -1
WWT.no <- na.omit(WWT.no)
WWT.no.matrix <- model.matrix(~. -1 , WWT.no[,-1])
WWT.no.label <- as.integer(WWT.no$condition_CCTV_score) -1
boosted.conditiontree1 <- xgboost(data = WWT.yes.train.matrix, label = WWT.yes.train.label, max_depth = 10, eta = 1, nthreads = 2, nrounds = 50, num_class = 6, objective = "multi:softmax", verbose = 1 )
boosted.conditiontree1 <- xgboost(data = WWT.yes.train.matrix, label = WWT.yes.train.label, max_depth = 10, eta = 1, nthreads = 2, nrounds = 100, num_class = 6, objective = "multi:softmax", verbose = 1 )
xgb.plot.tree(model = boosted.conditiontree1)
pred6 <- predict(boosted.conditiontree1, WWT.yes.test.matrix)
confMatrix6 <- table(Actual = WWT.yes.test.label,
Predicted = pred6)
confMatrix6
sum(diag(confMatrix6)) / nrow(WWT.yes.test.matrix)
pred7 <- predict(boosted.conditiontree1, WWT.no.matrix)
confMatrix7 <- table(Actual = WWT.no.label,
Predicted = pred7)
confMatrix7
sum(diag(confMatrix7)) / length(WWT.no.label)
boosted.conditiontree1 <- xgboost(data = WWT.yes.train.matrix, label = WWT.yes.train.label, max_depth = 10, eta = 1, nthreads = 2, nrounds = 50, num_class = 6, objective = "multi:softmax", verbose = 1 )
xgb.plot.tree(model = boosted.conditiontree1)
pred6 <- predict(boosted.conditiontree1, WWT.yes.test.matrix)
confMatrix6 <- table(Actual = WWT.yes.test.label,
Predicted = pred6)
confMatrix6
sum(diag(confMatrix6)) / nrow(WWT.yes.test.matrix)
pred7 <- predict(boosted.conditiontree1, WWT.no.matrix)
confMatrix7 <- table(Actual = WWT.no.label,
Predicted = pred7)
confMatrix7
sum(diag(confMatrix7)) / length(WWT.no.label)
boosted.conditiontree1 <- xgboost(data = WWT.yes.train.matrix, label = WWT.yes.train.label, max_depth = 10, eta = 1, nthreads = 2, nrounds = 20, num_class = 6, objective = "multi:softmax", verbose = 1 )
xgb.plot.tree(model = boosted.conditiontree1)
pred6 <- predict(boosted.conditiontree1, WWT.yes.test.matrix)
confMatrix6 <- table(Actual = WWT.yes.test.label,
Predicted = pred6)
confMatrix6
sum(diag(confMatrix6)) / nrow(WWT.yes.test.matrix)
pred7 <- predict(boosted.conditiontree1, WWT.no.matrix)
confMatrix7 <- table(Actual = WWT.no.label,
Predicted = pred7)
confMatrix7
sum(diag(confMatrix7)) / length(WWT.no.label)
install.packages("nnet")
WWT.modelling <- read_csv("WWT.modelling.csv")
library(ggplot2)
library(tidyverse)
library(readxl)
library(lubridate)
library(corrplot)
library(naniar)
library(keras)
library(glmnet)
library(xgboost)
library(finalfit)
library(rpart)
library(MASS)
library(ranger)
WWT.modelling <- read_csv("WWT.modelling.csv")
WWT.modelling <- WWT.modelling %>% mutate_if(is.character, as.factor)
WWT.modelling$condition_overall_score_label <- as.factor(WWT.modelling$condition_overall_score_label)
WWT.modelling <- read_csv("WWT.modelling.csv")
WWT.modelling <- WWT.modelling %>% mutate_if(is.character, as.factor)
WWT.yes <- WWT.modelling %>% filter(condition_CCTV_app_availability == "yes")
WWT.no <- WWT.modelling %>% filter(condition_CCTV_app_availability == "no")
missing_plot(WWT.yes)
missing_plot(WWT.no)
WWT.yes <- WWT.yes %>% dplyr::select(-condition_CCTV_app_availability)
WWT.no <- WWT.no %>% dplyr::select(-condition_CCTV_app_availability)
summary(WWT.modelling$condition_CCTV_score)
summary(WWT.yes$condition_CCTV_score)
summary(WWT.no$condition_CCTV_score)
set.seed(123)
rows_to_move <- which(WWT.no$condition_CCTV_score== "5")
num_to_select <- min(5, length(rows_to_move))
selected_rows <- sample(rows_to_move, num_to_select)
WWT.yes <- WWT.yes %>% rbind(WWT.no[selected_rows, ])
WWT.no <- WWT.no[-selected_rows,]
summary(WWT.yes$condition_CCTV_score)
summary(WWT.no$condition_CCTV_score)
WWT.yes <- WWT.yes %>% filter(condition_CCTV_score != "None")
WWT.no <- WWT.no %>% filter(condition_CCTV_score != "None")
set.seed(749)
sample.index <- sample(1:nrow(WWT.yes), size = 0.8 * nrow(WWT.yes))
WWT.yes.train <- WWT.yes[sample.index, ]
WWT.yes.test <- WWT.yes[-sample.index, ]
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
predictions <- predict(m.logistic, newdata = WWT.yes.test)
View(m.logistic)
View(m.logistic)
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
predictions <- predict(m.logistic, newdata = WWT.yes.test)
confMatrix7 <- table(Actual = WWT.yes.test$condition_CCTV_score,
Predicted = predictions)
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
predictions <- predict(m.logistic, newdata = WWT.yes.test)
confMatrix7 <- table(Actual = WWT.yes.test$condition_CCTV_score,
Predicted = predictions)
confMatrix7
sum(diag(confMatrix7)) / length(WWT.yes.test$condition_age_score)
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
predictions <- predict(m.logistic, newdata = WWT.yes.test)
confMatrix7 <- table(Actual = WWT.yes.test$condition_CCTV_score,
Predicted = predictions)
confMatrix7
sum(diag(confMatrix7)) / length(WWT.yes.test$condition_age_score)
summary(m.logistic)
summary(predictions)
condition.tree <- rpart(condition_CCTV_score~., data = WWT.yes.train)
plotcp(condition.tree)
library(nnet)
m.logistic <- multinom(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train)
predictions <- predict(m.logistic, newdata = WWT.yes.test)
confMatrix7 <- table(Actual = WWT.yes.test$condition_CCTV_score,
Predicted = predictions)
confMatrix7
sum(diag(confMatrix7)) / length(WWT.yes.test$condition_CCTV_score)
summary(m.logistic)
summary(predictions)
predict1 <- predict(condition.tree, WWT.yes.test, type = "class")
confMatrix1 <- table(Actual = WWT.yes.test$condition_CCTV_score, Predicted = predict1)
confMatrix1
sum(diag(confMatrix1)) / length(WWT.yes.test$condition_CCTV_score)
predict1 <- predict(condition.tree, WWT.yes.test, type = "class")
confMatrix1 <- table(Actual = WWT.yes.test$condition_CCTV_score, Predicted = predict1)
confMatrix1
sum(diag(confMatrix1)) / length(WWT.yes.test$condition_CCTV_score)
plot(condition.tree)
predict1 <- predict(condition.tree, WWT.yes.test, type = "class")
confMatrix1 <- table(Actual = WWT.yes.test$condition_CCTV_score, Predicted = predict1)
confMatrix1
sum(diag(confMatrix1)) / length(WWT.yes.test$condition_CCTV_score)
plot(condition.tree, margin = 0.02)
text(condition.tree, pretty = 2)
condition.tree <- rpart(condition_CCTV_score~ MATERIAL, data = WWT.yes.train)
plotcp(condition.tree)
predict1 <- predict(condition.tree, WWT.yes.test, type = "class")
confMatrix1 <- table(Actual = WWT.yes.test$condition_CCTV_score, Predicted = predict1)
confMatrix1
sum(diag(confMatrix1)) / length(WWT.yes.test$condition_CCTV_score)
plot(condition.tree, margin = 0.02)
text(condition.tree, pretty = 2)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 5)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 5)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 4)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 6)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 3)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 3)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 3)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 3)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 3)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 3)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 5)
rf_model <- ranger(condition_CCTV_score ~ MATERIAL, data = WWT.yes.train, trees = 10000, mtry = 1)
predict3 <- predict(rf_model, WWT.yes.test)$predictions
confMatrix3 <- table(Actual = WWT.yes.test$condition_CCTV_score, Predicted = predict3)
confMatrix3
sum(diag(confMatrix3)) / nrow(WWT.yes.test)
install.packages("e1071")
